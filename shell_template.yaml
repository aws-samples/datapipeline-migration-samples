AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  DataPipeline to StepFunctions. This template creates Step Function Workflow equivalent to DataPipeline, S3 Bucket and the respective permissions.  

Globals:
  Function:
    Timeout: 3

Parameters:
  EmailAddress: 
    Type: String
    Default: "abc@gmail.com"
    Description: "Enter the email address to notify job completion status"

Resources:
  
  Ec2VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - Key: Name
        Value: DPL-SF

  EC2InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
      - Key: Name
        Value: DPL-InternetGateway
  
  EC2IGWVPCAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref EC2InternetGateway
      VpcId: !Ref Ec2VPC
 
  Ec2Subnet:
    Type: AWS::EC2::Subnet
    DependsOn:
    - Ec2VPC
    Properties: 
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref Ec2VPC
      Tags:
      - Key: Name
        Value: DPL-SF-PublicSubnet
  
  EC2SubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: Name
          Value: PublicSubnet-RouteTable
      VpcId: !Ref Ec2VPC

  EC2SubnetPublicRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref EC2SubnetRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref EC2InternetGateway
  
  EC2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref EC2SubnetRouteTable
      SubnetId: !Ref Ec2Subnet

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
    - Ec2VPC
    Properties: 
      GroupDescription: DataPipeline EC2 Shell SecurityGroup
      GroupName: DPL-SF-SG
      VpcId: !Ref Ec2VPC

  InboundSGRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt EC2SecurityGroup.GroupId
      IpProtocol: "tcp"
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt EC2SecurityGroup.GroupId
  
  OutboundSGRule: 
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      GroupId: !GetAtt EC2SecurityGroup.GroupId
      CidrIp: '0.0.0.0/0'

  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties: 
      KeyName: datapipeline-sf-Key


  DPLS3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private

  EC2Role: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  EC2RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "DPL-SF-EC2-Policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action:
            - s3:GetObject
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref DPLS3Bucket, "/*" ] ]
          
          - Effect: "Allow"
            Action:
            - s3:ListBucket
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref DPLS3Bucket] ]

          - Effect: "Allow"
            Action:
            - states:SendTaskSuccess
            - states:SendTaskFailure
            - states:SendTaskHeartbeat
            - states:GetActivityTask
            Resource: !Join [ "", [ "arn:aws:states:*:*:activity:", "Monitor_Job" ] ]  
            # If you are changing the activity name from the template, it has to be updated in the above statement as well. 
      Roles: 
        - Ref: "EC2Role"


  SampleBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DPLS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
            - s3:GetObject
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref DPLS3Bucket, "/*" ] ]
            Principal: 
              AWS: !GetAtt EC2Role.Arn

          - Effect: "Allow"
            Action:
            - s3:ListBucket
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref DPLS3Bucket ] ]
            Principal: 
              AWS: !GetAtt EC2Role.Arn

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - Ref: "EC2Role"

  SNSTopic:
    Type: AWS::SNS::Topic

  SNSTopicSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref SNSTopic
      Endpoint: !Ref EmailAddress
      Protocol: email
  
  SFRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "states.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  DPLSFRolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "DPL-StateMachine-Policy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action:
            - states:CreateActivity
            Resource: '*'

          - Effect: "Allow"
            Action:
            - ec2:RunInstances
            Resource: '*'

          - Effect: "Allow"
            Action:
            - ec2:TerminateInstances
            Resource: '*'

          - Effect: "Allow"
            Action:
            - states:DeleteActivity
            Resource: '*'
          
          - Effect: "Allow"
            Action:
            - iam:PassRole
            Resource: !GetAtt EC2Role.Arn

          - Effect: "Allow"
            Action:
            - sns:Publish
            Resource: !Ref SNSTopic

      Roles: 
        - Ref: "SFRole"

  DataPipelineStateMachine: 
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: |-
          {
            "Comment": "A description of my state machine",
            "StartAt": "CreateActivity",
            "States": {
              "CreateActivity": {
                "Type": "Task",
                "Next": "RunShellScript",
                "Parameters": {
                  "Name": "Monitor_Job"
                },
                "Resource": "arn:aws:states:::aws-sdk:sfn:createActivity",
                "ResultPath": "$.ActivityInfo"
              },
              "RunShellScript": {
                "Type": "Task",
                "Parameters": {
                  "InstanceType": "t2.micro",
                  "ImageId": "ami-005f9685cb30f234b",
                  "MinCount": 1,
                  "MaxCount": 1,
                  "SecurityGroupIds": [
                    "${ec2SecurityGroup}"
                  ],
                  "SubnetId": "${ec2Subnet}",
                  "KeyName": "${ec2KeyPair}",
                  "BlockDeviceMappings": [
                    {
                      "DeviceName": "/dev/sdh",
                      "Ebs": {
                        "VolumeSize": 20
                      }
                    }
                  ],
                  "IamInstanceProfile": {
                    "Name": "${ec2InstanceProfile}"
                  },
                  "UserData.$": "States.Base64Encode($.userInput)"
                },
                "Resource": "arn:aws:states:::aws-sdk:ec2:runInstances",
                "Next": "Pause for Job Completion",
                "ResultPath": "$.taskOutput",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Comment": "Launch Failure",
                    "Next": "SNS Publish",
                    "ResultPath": "$.runInstances"
                  }
                ],
                "TimeoutSeconds": 100
              },
              "Pause for Job Completion": {
                "Type": "Task",
                "Resource": "arn:aws:states:::activity:Monitor_Job",
                "Next": "DeleteActivity",
                "HeartbeatSeconds": 600,
                "ResultPath": null,
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Comment": "Job Failure",
                    "Next": "SNS Publish",
                    "ResultPath": "$.jobStatus"
                  }
                ],
                "TimeoutSeconds": 180
              },
              "DeleteActivity": {
                "Type": "Task",
                "Parameters": {
                  "ActivityArn.$": "$.ActivityInfo.ActivityArn"
                },
                "Resource": "arn:aws:states:::aws-sdk:sfn:deleteActivity",
                "Next": "TerminateInstances",
                "ResultPath": null
              },
              "TerminateInstances": {
                "Type": "Task",
                "Parameters": {
                  "InstanceIds.$": "States.Array($.taskOutput.Instances[0].InstanceId)"
                },
                "Resource": "arn:aws:states:::aws-sdk:ec2:terminateInstances",
                "Next": "SNS Publish"
              },
              "SNS Publish": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "Message.$": "$",
                  "TopicArn": "${snsTopic}"
                },
                "End": true
              }
            }
          }
      RoleArn: !GetAtt SFRole.Arn
      DefinitionSubstitutions:
        ec2Subnet: !Ref Ec2Subnet
        ec2KeyPair: !Ref EC2KeyPair
        ec2SecurityGroup: !Ref EC2SecurityGroup
        ec2InstanceProfile: !Ref EC2InstanceProfile 
        snsTopic: !Ref SNSTopic
        

Outputs:

  S3BucketName: 
    Description: "Upload your shell scripts to this bucket"
    Value: !Ref DPLS3Bucket

  StepFunctionsARN:
    Description: "Step Functions ARN"
    Value: !GetAtt DataPipelineStateMachine.Arn
  
  EC2VPCId:
    Description: "EC2 VPC Id"
    Value: !Ref Ec2VPC

  EC2Subnet:
    Description: "EC2 Public Subnet name"
    Value: !Ref Ec2Subnet
  
  EC2SecurityGroup:
    Description: "EC2 restricted Security Group"
    Value: !Ref EC2SecurityGroup

  EC2KeyPair:
    Description: "Key Pair to access the EC2 instance while the shell job is running"
    Value: !Ref EC2KeyPair

  EC2InstancePofile:
    Description: "EC2 uses this IAM Profile to access the AWS resources. Add additional permissions, if you want to access resources other than S3"
    Value: !Ref EC2InstanceProfile
